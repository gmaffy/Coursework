"""UCSD Bioinformatics Algorithms Part II,
Week 1: Finding Mutations in the Genome."""

class Trie(object):

	"""Directed tree structure to represent a collection of strings.
	Contains a root node with indegree zero. Edges are labeled with
	characters and nodes are given arbitrary integer labels (0,1,...,n).
	Each edge leading from a given node is distinct.

	When trieify is called on a list of strings, that list of strings is
	given a trie representation such that each path from root to leaf
	spells a string in the list by concatenating the edges.

	Each node is represented as a tuple of (integer ID, {dict of outgoing edges})
	where outgoing edges are repesented as character : integer ID pairs"""

	def __init__(self):
		self.root = (0,{}) #each node is a tuple of (integer ID, {edge dictionary})
		self.nodes = [self.root,] #list of nodes indexed by ID

	def trieify(self, list_of_strings):
		node_counter = 0
		
		for string in list_of_strings:
			current_node = 0

			for char in string:

				if char in self.nodes[current_node][1].keys():
					current_node = self.nodes[current_node][1][char]

				else:
					node_counter += 1
					self.nodes.append((node_counter,{}))
					self.nodes[current_node][1][char] = node_counter
					current_node = node_counter

	def __str__(self):
		return str(self.nodes)

	def get_edge_list(self):
		edge_list = []

		for node in self.nodes:

			for key in node[1].keys():
				edge_list.append(str(node[0])+'->'+str(node[1][key])+':'+key)

		return edge_list

	def is_leaf(self, node_idx):
		"""Return True if self.nodes[node_idx] is a leaf."""
		return not bool(self.nodes[node_idx][1])

	def is_string_in_trie(self, new_string):
		"""If some slice new_string[0:x], where x <= len(new_string), exists in the Trie,
		return the slice. Otherwise return None."""
		symbol_idx = 0
		symbol = new_string[symbol_idx]
		current_node = 0
		pattern = ""

		while True:
			#print symbol_idx, symbol
			if self.is_leaf(current_node):
				return pattern

			elif symbol in self.nodes[current_node][1].keys():
				pattern += symbol
				symbol_idx += 1

				try: #if the Trie is longer than new_string, return pattern (which should be new_string)
					current_node = self.nodes[current_node][1][symbol]
					symbol = new_string[symbol_idx]
				except IndexError:
					pass
				#	return pattern

			else:
				return None
		return None

	def check_against_text(self, text):
		"""Return all indices within text where a string in the Trie appears as a substring."""
		current_index = 0
		index_list = []
		while text:
			if self.is_string_in_trie(text):
				index_list.append(current_index)
			current_index += 1
			text = text[1::]
		return index_list


t = Trie()
patterns = """TTATGACCGGCGCTGCGGTCAAGTCTTCGGGCCCCATCCCACTCTTCACGGGGTGACGGCTTGCCATAATTTGCGTTGAGTAAA
GGTCAAGCCTCATCAGAGTCTTATGCATCGTGCAAGAAATAGTTTAGATTTTACGAGATTGCGTTGCAGATAGCTATGATTCGGGTAAGTTT
TATGTGCGCTCGAACAAGCTTTAGTGAGTGTGGTAAAGGGACTCCGCACTGTGCAGCATGCGTTAAGTCAACGCCTGGAGTAGACGTGGGCAGCGTAG
TTTTCTTCCAGGTGCCTTTACATTAAAGAGGTGACACTGCGTTCAATCCAGAATATGTTAATAGCCCCGCTATGATCATGACATGCGAAGCGGAGC
GCTAATCTCCACTTACTCCGTTCTCTTCTTCCCGGCGGCCAGGGTGAGGATAGTACCGATGAGTAGCTGCGACAGTAAAGGGTTAGCGTAGCGGCC
TGGGGTGCACGACACCAACAGTACCTTATTTCAGATTATTGCACTCCATGGAAGGCAGACCGCACTTGTCGGTCATCGCTGTGACTGTAC
GAGACCTTTGATCAGAATGAATCTTCAGTGATTACCTGTAACAGCAGCCTGGTTGAAGACCGCTTCGCACCGGCGAGACAT
CAACGGGCTAAGCTTGCCCGTGCCACAGACCCGATATGCCGACAGCTATGCACTAAGTACAAAATATTATAGGTCATCGACTCCTCCATTCTC
TATCTCGCAATGCATGAGGGGCGCCATTTGCCGGGGCTCGCAGACGCGCTGGTTTCACACTGGCATGATTCAGATTTCATCTTTCGACAAAC
CTACTTGAGCGGCAGGCCTTTAATCGACCACGAATACCCTTATCGGCGCTTGTCAATATCCGCGACAAGTAGCAAAGTCACACCT
GTCACTTCCTCCCTACCCAAATTACCGATACGGTTGAATCATATAACATGAGGTCTCGATCGGGGCGGTCTGTTACGTGGGTGCAGATATTGG
GCGTGGTATACCATACAAGAGGTGCGATTGTGTAGCCTTTTGCTCTCGGAGAGTTAAGTAGAGGTTTAAGTCGCAACCAGTTACCTGAGAG
GGCATACACGGTTCCAAGCACTTGTCTGACTCCTCGATCCGCGTCGAGTCCGAAAGCGGAGCCGAATGCTCACACGTTTGCAAGCCTTCTCTTGAGACTA
TGAGTACCTCCTCCGCGGGCCGCTGGCGGTCACGCTGCGGAGGCTGGACCGCCCTCCAACTAGGCAACGCTAATCGGCGTCT
TAAAGAGTAGAACGCGTATCCCCTGGGAGGGATTGCCAGAACGCTAGTAAGGAGGGCGTTAGGCATGGCTTAGAGAACCCTTAGGTCT
GTGGGCCCCTTGCATATGCAAACATCATCACAGGGTGATATGCAAGATGTGCAATCCAGGCTTGTTGTGATTGCTGTAAAGCGACTGAAC
CGCAAAGATCGACGGGAACGTAAGGCGTGCCGGTTTGTTTCCCTATTGGACTAGGTCTGTCGAGTTGGGATACGCCTTCTTCTAGGCTTTTGAA
CCTTACTTACGGTATAGATATGTTGGATATGTGGCCCTGGAGATAAGGTTTACAGTTTCCAAACGGTTGTTGGTAAATCTTCTCGTACCGCACGC
CACGGTTGCACATCGGCCACGACGTATTCTGGGAGGTTGTCTTTAACATCGTTAGGGTATGTGGCTGCTTCGCCCTCGTGAATCCTCCGCGGCAGC
TCAGTGTAATGTGATACCGTTCCCTGTCTGTTCGCTTTGTGGAATTGGATGATCAAAGTACAGGAGCAAGCCTTGCCTGCGGAGTGCGGT
ATTCTTCCACCTGAAGACGGTATCAAGAGCCTATCGATCCGGATGCCGACATATACCCCCCACTTGGGCGAGAAAAGTGAGTTAT
CTGTCCCCGTCGCATCTGATGGGAGGCGGTACTGTCCGGTCACCACTCATACTTAGCGCAGCCACATCAAATGACATTACCGTGACGACCC
AGAGAAAGGCTAGACCGGAAATGCCGTCGCTCTAATCACAGCGTGCAACCTCAATGGATTTGAAAATAGCTAACGGGGGAGGGTACCCCTCC
CTATTATAAGTACCTATACTAGTTATGGGATGGCGACGATTGTGGCTTGACTGTGTGAACGATCGCGGGATCTTGGTGTTTATTTT
AGCGCCTTTGTGTCCCCCTGCCCACACAATCCAGTTCGTAGTTACTACATCGTTCTTCGTCGATAACAAATCGGCCATTTGTGCT
ATTAGGGCCTAGAGGCGACTCGTCTGGCCATAACAAGGTAGAAGTATACTGAGTGCTGATGGACAATGCTAGTAAGAGAA
AGATACTAAGTGCTGTAGTGATGCAAAAAATACCGTGATATATTCATACAGCAGCCGTCCCCGCTGCGTTCAGTAAACCCAACACAATCATT
GCAGCGCAATTGAGTCTAGTCTTTTAACTCGGGAGCGATACGCGAGCCTCCTAAGCTCTCGACCTGGGGTATGAGCGTCCC
ATTCGCTAAGGCGAGGTTTTCCCGCACGCCGACACTCTTGCGAGCACACCCCATTAAGGAAGGTGGAGTAGTAAGGGGCTT
CACAGGCGGTAAGCCCCTAGTCTACCCTAGCAGACACTAGATTTGCATCCCGCTTAATTTTCTCTATCGGAGATATTCAGGTGGCGTTG
GTGGACCGTACCTGGTCCCGATTTGGATTGGTGTCTCGTAATCGTGACTTATTGGGGACGATGTACACGCGCCATGGGTTCGGTATGGGAAGTCC
CATTCTCAATCCACAAGGGGAAAATAAGAGTATGAGTGGTGTCTGTCTCGCTGCGGTAAATGAACGCACACATCTAGTATCAC
TTTAATACCCAGCTAAACCCCTAGGTACCATGATTGAGCCTAATATGTAGCAGAAACGACAATCTTCCCAGGCGGCTAGTACGCCCACATCG
GATATTTATCAGAGGTAGCGGGGAACGAGGGGCCTATGGACGTGGGGACGAATCAGCTTATGAAAGTCCCTTTTGTGCACGGAAGACATG
CATTTCCTGGGGGGACCCAAAGTAGGGACTAGGTACAACGCGACGGGCCCCCACACCTGAGGGACCAGCCTCCGAGGCATTCTGGT
GGATCCGAACAAGGTACTGTGGTTAAGCTGCCACCCGATGTTATAATTGGCCCCAATCGGATAGAATTGCGGTTGGATGCTGAACCCATA
ATTAACGGAAGCGATGTTTTATCCTTGTGTGTCGATTTTGTATCCTGGGTTAACGATGCCGATACAGCTTATAGAACGTGGTCACTACCGCGAGA
GGGGAGGAACAGCTAGTCCTGCGTAACAACTTTCATCTCACTCTCTAATAGACCCAAGTAAATTTTGTCCCTGGGAAAGCTCCTAT
GGCTTCAGTGGGGTGCGCAGGCCCCTGCATGAGTAGGTCGCTTCACATGTATCCTTCATAATCTTATGAGCACCGGTGAGTT
CATGATCGAGCGAAGAGGTATCGTGAACTGTGATCATAATAGATCACATGGCATAGCTCTAAAACGAGAACCTTAGATTAC
GATCAAGTGTAGGCATCGTAGCTTCGTGACCTTATTGTTCCTCTATCCGTAGTCCTGCTACGTCGCGCCCCGGTATTGCGGGGACAGGACACTCCAGC
TTGAGGTGAACTGTTTGGGGTGTTGGTGTAGCTCCCTAGTGGCGAATCCTCGAGCTGGTCATATTCCGGCCAAGCATCTTGATA
GCAAGTTCTAACCATCTTATAACCCCAACGGACATATCCCCGTTTCAAGTTCGCTTGTCCACAGATCCTGGAGAGATTCTT
AGCCTCCCTCCACATCTCGTAGTTTTTAACCCTTCAATTATTCAAGGCGACACTTGGGCCCAGCAAAGGGTGCCTCCACTGCCCCGG
GGTTATATTGAGTTTCAGGAGGGATAATCAAAAGCTTAACGTTCCCAGATAGGGGCTAATGCAGAGGTTGAAATTCAGATAAC
CTGCGAGATCGGTGGTCTCGTACGCTAAATTAAAGGCCTTCCTAGGGGTCATCTGAACACATAGTGACAATCACGGCAGGCCTGCCCATTTCACCAT
ACACAGCCGCTCTCAAAGGTCATCGCGACATGGGCCGACTATCCAGCGGCGATGTTGCCCCCCAAACCTCTAAAGCATGGGGATTCGACC
ATGACCTTCCGTCCCCATAGATTTGACGTTTCCCATGATGGGCTCGCAAGGCACATAACCATGATGCTCGAGGTCGTAGCGAAAAACAACG
CCCCAATTCCCTCCTCGGGATTCTTAGAGGGGCTGCGAGAAGCGACACTTACAACCTGATAATATATCGAGAACACGGAAGCGGC
CAGAAGATTTGCCTTGTGTGAGTCACGCCCGGTGTGCAGACGATCCACCACTAAGCAAGGCTGGCGACATATCTAAGGATGTGCTGCATCCGTTC
TGCCAGCCTGATAGAGGTGTCGCAATGCGGGCGCGAAGACCAGATGACAGACGATCGTGCCAGGCTTGGGACGCTCCCCTACCCAGGA
CCCATCTTACAATAGAACAACATGGTGTGACTAGGTGAGGGAGTTAATTCGGTGGTAGCTCAGCAATAAAACCTAGTGCGAAACGATGCTGGAA
ATGCTCTTCTACCGGTCTTCAGAGGTTATAAAGCGGACTGATATCCCCATTGCTGGACAGCAGTGAACGAGTAGTTTTGTAGA
GGGCTAGCCAACTAAGCATCAGCCTGTATGAGGGCGACCCCGTAGCCTTTAGGGCAGGATTATTGGTTGCATGCACCACTCTCGGGCAACGATGGCCTGT
ATCGTCAACAGAGGGCAACCACATCCGAATGTCGCACTACTTTCTATGCCGCGCACTGGACTGGAGTTTTTTGGATCTTAGGAATTTCGGAACACCT
ATAATTAAATTTGGAAATCTGCGAGCGTATAGAGCCCTTATGGTGGGGTCTATTGTGTGTGACGATTATGGTACCTTATAAAATGGCGTTCATGTTTTG
CCGGGGCTAACGTATATAGCGTGCTTAGGACAAGTGTCATGTGTGCTGACAGCCCGCGGACGCAACAGGTGTAGCAAATATTGTCATTGCCCCAATGTAA
CCCTGCTCAGTAATAAATCAGGTGACGTGACGGTCTCCAGCAAACACTGACTATTAAATGAGTCTTACAGTGCTTCCCCGCACATTAAGCGTAA
CTTTCTTATGACCTGGAATCGGTGGACTATTCTCGTCAGCCTACCGTGCTCTAAAAGTTTCCGACTAGAGTCAAAGGCAA
TCGGACGAACGAGAGGAATTCAAGGCTGTCTCCAATTTTCATACATTTGCCCCCTCACATTCCTGATACTGTGACTGCTATCCGGCAGG
AGTGGTAACCTCGGAAACACTATGAGTTTTAGAAAGATTGCGCTCACCCTCAAAATGCCTGACAGCTTGGGGAGTGGGCGTC
ACTCCCATCTCTGGCGCATTCAGTCCTAGAATTTCTAACAGCCAGCCCCGCGCGGGTCGTTGTAACCCGGAACAGTTGCTAAC
CACGTCTCAACGTGTTTGCTCGGGCAATTCTTGCTGGGAGTGGAATTCTCGGCTATATATAGACAAACGTCTGTAGGGCAAGGCCTGCCTTCGGAAC
TACCGGCAGCGTTAAAAGCGCACAATCACGCGCCTTGGAATATTAGTGAGTTCAGCTAGCTTGACTTAGGGGTGGACAGAGCATGTATGTCCTCGACAC
CTATATCACGGGCATGCTAGTGTTCCCGCTACAGGCCATTGACGACTTAGATAGGGCGGCTTGCGTCGACTCATCGCTCAATGATATTT
AACCCGATCAATCCAACTGCGCAAATGCGATGGCCAAGCCCGCCACGTAGACTCACGGGGGAGTTGGAAGGGTCCTCGGTGGGTCAAAATCTAACTGTTG
CCCCTTACTCTTTTCTAGAGAACTGAGTCTTCCTAGTCGCATGATTGTTTCGGGCAAAATCTGTGCTTTATATGCCCATCGTCTACT
CCTTTGAGCGTTAAGGCGCTTATACTAACATTGTTCGCTATGTGTGGTTTCAGCCTCGCGTTGACAAGGAATTCCAGTCCGCGGGAGCCACTCT
GTAACGATTGCTGCGGTCAATAGTTTCAGTATTCGTTATGGTTGTACTTCATATTGCAATGGGCTAGTGCCCGATTTGCTCGTTAGACTCGGTG
GGATTCGTATCAAATATGGCGACGAGATTAAGGTCTCCCCTGTCATTCACATGGCCTCTGCTACAATGGCAACCTATTCC
CACAATTAAGAGTAATTATCTCCCTCAACGAAGTCTCTTTCTCGCCCATAGGACGATATCATCCCGGCCTCCTATACCTACTCCGGCGCCGGCCT
CGAAAATTAGCTTAAGAGTGGAATGTGGTGACGACAGTTGCCCCCCGAAATTTCTTCCAGACTCGGTCAGCAGAACAATAAGTTTGTTCTAATTGT
ATGAGACCTGCGCCAATTCAGAAATGACCACCGAGCTTTCCGATGCGACTATCAATCTTATCCTGATCATGATAGGTGGAGCGCA
GGATAGACGGAGGCAACCTCTTGGCTGGCCTCCTACGGCCAGCTGCTAGGTGCACACCGCCGGAAGTCCCTTAACCGAAAAGCTTC
TAAGTTAGCCCGAATATTCGTGCGAAATATATGTTTGTAGCTGAGGACAGCACTGTTGTACAGCCTAAACTGTTGCGGTCGTGATTCCGTTGCAGTTGGG
CGTTTCCTCCTCTGTCGGAACCACCAATGCCGGAATTGAAACAGCAGAATGTGGTGATGTTTCGAGTCTGTAAAGTAATCCGATGAATAGAATATGAG
TGCTGGTAATAACAACGTACAGTGAGCTAATGCTCAGAGAGGCAGGAACAAGAGTCCGCCAAGCCACGCACTCGGTCTTC
AGTCCGTTACCAGGTACGCTAATAGTGCTCTGTTTAACCAGAATAGGTGTTATGGCTGTTGCAGTTCTGCGACGTCAGCGGCAAAGCGCTTGGA
TCGAACTTGCAGAATCTCAAGCTCACGCAAAGTGCCTTTGCAGGTCTGCCAACACTCAGCCTTGTTATGCCAATGTATGTAACGAAA
CCCCGACGTCATTGCCGCGTTATCTCTGACGCAGAGCATGTTACCACTGGCCGGATCTCATAAAAGAAGTGTCCAGTACCGCACCGACACCATTG
GTCACTGTCTGTAGATAAAATAATCGCGATAGCAGTTTTCAGTGTTCAGAGGGCGAAGCTAAGGACTAGCAGAAAGACCTACTTT
AATGTCAGTGAATTTCGTCTCGGATAAGGGCGAAATTAATTATTCACGGTGTCTGACTTAAATTACTTGACGTTTGTAACACTCTTCATTTC
AGGTCTTTCGGTAGGTAATGTAGAGCAAGTTTGGCGACAGCCATCAACTATTGCGTGGGGCTCTCTGAGTCATTGGAACG
CATTATGGGCCCGCGTAGAAACTGGGCGGGAGGGTGTTGCCTCCTTAGTGCGAAACCCGGCGGGACCTCCAGTCGTCTAGTC
ATTCCGCTACGACCAATATGACAACATTCGATTACGCGAGTCGCGCGGAACCCTTAAGGCTACAATCGGGAGTGTCGGCATTCAGTTTT
ACAGCCCAGAGAAGACTATCATGATTAGTCAGGATGTCAGATACTACCCTGGACCCGAAGGCCCATACAGCCAAATCTACTA
GCCAGGTCTACTGCGGCGTGCTCAGGTCGATGCTCTGAAGAGCATCCCTTAACACACTGTTGGCGGACCCTGTGGGATCTCCCATTACCAACGT
GGCACTTCGGAGTCTTTCAGTAAACACCATATATAGCGGTATATACCCTGTCGGAAGAGCGACTCTACTGCGTGCACCCCCTTGGTGCTCTA
TCGCACGTCGCCTTACTTGAGGTTATTGCCTGACTCTATTCACGGGGGTGCTAACTGTTAACCTAGGACTATTCCCATGGTTC
GCAGGATACACTGGTAGCGGGGAGCTGACATCGGCCGAGGGCCTTCTCTCATTTCCAGAGGTCCTGTCCCTGTTAGGCATGAT
TTTGTGTTACAGAGGCAGCTTATAGAGGGTGCCGGGACTCTCTCTTTGCGCAGCTTCAGAGGTGGTACGTAGGGTTTGTA
GCCCCGGAACTGGAAGTGGACATCCCAGTCGTCACTACACATCGTCTACTGGTTTAACCATCATCAACCCCTGACTTTTATGCTACTACC
TTTACGAGTTGCGCTTCTGCAACGGGTGCAAGTGCAGGGAGAGGACGGTGATGCCTGAGAGCGAGGCAGCGCTGTTTTGAAACCTGATCCAAGTCT""".split()
t.trieify(patterns)
for i in t.get_edge_list():
 	print i

answers = "108 115 312 319 375 382 500 565 1178 1185 1265 1858 2113 3107 3229 3236 3525 3537 3668 3675 3722 3729 4144 4151 4291 4315 4477 5345 5352 5664 6449 6456 6652 6659 6721 7105 7424 7431 7800 7868 7875 8078 8304 8311 8523 8536".split()

patterns = """CCACAATCC
CTAAGCACT
TATTTCGTA
ACACATGAC
TGGCTGATG
TTTCTGATT""".split()
t = Trie()
t.trieify(patterns)
#print t
text = "CAAAACTACACGTCCCTGTTCTCTCACGAAGCGGGTTCCTTTGTAAACTTAGCAAGTGACTTCTCACGACTGTGAAGGCCGAACTCTTCGCACACGGTGCATTACTCACTCACAATACAGAAAGAATCATCGACAGTTTATCTGGACCCTCGCACGGTTTCGTCCCCCAATTGAGGTATTGAGCACGGGCTTCGCTCGAGTCCGTATCGCAGCGCAAATTGTAACTAGGCCGCGCCCCTTGTAGTGACCCTGCTAGTGGGCCTTCTGAAGACTGTGTTATTGATACCACCCGTAGCCCTTTCCACCTATTGCAGCCCGATCGGTAGCATCTTATCGGATGAAGCGGCCTAAGCGCGGCCGATGTCAATGATCCTCATTTTTTGAATAAAAAACTGAACAGGGCACTTTCTGATTTCTGATTGAACGGACCGAACCATCCTAAGGGCATTGCACGCCTTAAGACTCGCTATGACCCCTTAGAGGGTTGGATATCTCCATACATGTATCGCGTCACACCGAGATAGCGGGAGTATTTATTAAGTTTAACAAATGGCAGCACCAAAAAAACGTGCTACTAGTAGGTGTTCGTCGGAGCAGCTCCATCTAAGCACTAAGCACTGATAGCTGATAGACTTAGTACACAGCGTCGCTATCATATTGCAATTGGTTCCTCTGCTAGGGATGCGGCACGCCCCAAGTTACCGATGTCGTTGTGGCAGGCTAGTACGATTAGCCCCTATGGCTGCCAGGGTAGAATCCCATGCGGTATGAGTAATTTCGACAGGCTCAGCTACACATGACCACTTGGCAGATTCCTGGGTTCTAGGATACACCCCCCAAAGATTCCAACGGTAAATGGGCGCCAATACTCTCAACTTTGCAACCCGCGGAAGTAAGTAAACGTAGGTGGCTATTATAATGGGTCCGCCTCGTAAACGCGCGGTTGTCAGGTACCGGCCTCGAATTAGAGTTCACCAAATATGTTCGAAAGCTATGGATTGTGTGCTAAGTCACCATTTAGACATTACGGGTATATGGCGAATACGGCTCGCTAGTGATTGCAATAGAGAGGTTATGAACTTAGTGAAAGCGGCGAAATCCATACAGGGTTACCACCAGGGATGTGGTCGTAAGCGTCCCATCGAACTGAATTTCTAGGGGGGATCCCGTCGGCTCCGGTATTTCGTAAGATATTTCCTATCGTAAAGTGACGCCAAAAGTGCAGCGAAATTTAATCACTGCTTGTTCGCGTTACCCAGTTCGTTTTACGCCCAAACCAGACATCCAACTCTTACGCTAAAAGGGCATTTCTGTTATGAAAAAGGTTTCCGCGCTAAATACCGCCAGCTTTGACTTAGCCCTACACTTCCAGTTCACTGTAACGAGTTGTGACATCCGAACCGCGACTTGCCGATCGAGCCTTTGGAACTCCCTACTGTGGTATGCGTGGACGGGGCAGATCAGTGGGTTAATTGGCCCGCACCTCATTGGTCATGAATGCACGGCGCGTCGCCTCGCGTTATGCTGAAAGCGGAGTAACACTTCCATACGTGTAGTGTGTAGGCAAACAACACACCTCCGACTTACATACACCGACTTATTTCGTATTTCGTACGGCACGTTGGACCAACGGAAGCAGCTACACGATTGGTGGTCTTTTGTCCCACAATCCACAATCCACAACGCTCCCACACACGGTTAGGCACATGGCGTTAAATAGGACGTAGGAGCCCTATGGCTGATGGCTGATGTAAACGTTCTCCGTACTCTTACATCCACGGAACAGGCAAAGCATTCCGACACTCTCTCATAGGCAGCTGGCTACCGTAGCTGATTGCCAGTATTTATGTGCCGACCTACGGCCAACCGTATTTTGATTCCTGTAATGAACTCTGAAAGCGGCCAGCGTTTGGTATCCCATGGGCGGCGGGAGTTACTTCGCAAGCATATCTGCGACTCCCAAATACTAGTGCCTACGATCTATACTCCCCAGGGTGTAACGCAGGGAACGGGATACTATACTAAACCATAGTCGCTGTTTAGAGTCGAAACCCTGATTATTCCGCACTCCTTACGGGAGGTTCGATCCCACAATCCTTCTCTCTTACTCGCCTGAGTCGGAGCAATATCGGAGAAATATGCATTTTGGTATGGTAGGTGTCCACTAAACACTTACTGAAGCGTGACGAAGCTATCATGTACGAAGGTTGTATGCACGAGAATACTCTAGTTGAGTCAATGATACTCTGGTAAGCTGGCTCATCGCACAGCTCGAGCTCCATGTCGACTTTTGGATTAGCGACTCGCTGTTGAGGAAGTCTTTGCGATTTGTCGCGTCCAAGGGGAAAATTGAATTGACCGCGGCGCAACGTTTGTGTGAGATCCATTCACCTACAGTCCTACCCTTCTTCCCTCCCAATTCGGATGTGCAGTGCAGAGACCAGGCTCAAGGCAAGAAGGTCATTCATACCCGTGAGCAGTTCCACCACCGTGCTGCTTGCATGATTCATGAATTGGTCACCAGCATAGTAATCTCCCCGGCCCTCCCATGCATCCTGAGAGGGAAACTGTTTGTTGGCGACTGTTCATAATCGACGCTGATCTCTGAATACCACTTGAGTGAGAAGGCGGTTCAGCGCGCGTATCGTAAGTATATGGTCTTACCTCTTGTAGCTGAGCTATGCTCGCGGCGCATATGTAGAAACAACCCCGGCGTAGAGAGGAACAATTGGCCCTTGCCCAGGGGACTGTGTAGTGATCTACTAAGGCGTATCACATAGTCGCCCCCATAATCCAGCCCGGCCGCGTGGAGCTTGAAAGTCAAAAAGCTTACCCTGATCTCCCTTCGCTTTGACAATACCAGGATTTACTAAGCACTAAGCACTACGCGGTGGATAGGTCCATAGAAAGGATCCAAGACATGTCGAGACCCCGTAACCCTTGCTCGCTAACTGCGCCGACTAGTGGCTATTCGGAGTTCCTCACCCAGATGCCCACTTGGTAATTTCGCTGCTCGTAAGGTCATCATAGTCATCAATATGTATGCCCCACGCCGGGTGTCCCGAACGTGCAATGCATCCGGGAATTCATAGAAGATTAAGACGCTAGTCATTTGAATAGTGAAATTACTAGGATGTGCACGCCCCGTAGTTATTGGGCCAGAGGGTCGTCCCTACGACTACTCGCCGTGTTTCGCAACTGTGGAGTGGATTGGCCACAAACGGAAATCCGGGTTTCCGTCATTGTAGATATGGGGTCATATCGAAGTACGAATGGCTGATGTACCCGCCTTACGCGCAAGCGGAGAACACACCCACGTCCATGATGGAAGTACGAAGTAGACATCGCACAGTTTTGCCGGGTGGAGCCACGAGGAGGCTTAACCAGTTGCAGGATTTAGATCTATCTGTCTAAGAAAACAACGTAGATTGTTTACTTCAAGTTGGCAAGATTCGAATCTAATCATTGAGTGGTGCACAAAGATTAGGAGCCATTTTGGTTCGTACTAAGATACTCGAGACAAGACTGGGACGTTGCCCCTCTAGTTGAGAGTGATTTTCTGATTAAGCAGGTCTATAAGGGGTTCGAGACAATGCCTAATGTCAGGTTTCGTCGCAGCCTTCGTCCTGCTGGCTAACCCCGCTCTGATCGTCGCCGCACAGTGTCCAAAAGCTACAGAATAACATAGACGTCCGAATTATCGACCAGGATGGCCTAGTTATTGGGAGATCCGTGCACCGGTGTCCCAACCGCGATTGCCGAAAACTATAGGTGATAGGATTATGCTTCTATCGGGCTTCTTAGGGAGAGGGGGGAGTTGGTTTGTAGTGGTCCGTCGGTTTCGGGCTCGCACCTCATCGCTCCCTAATATTGTTTCTGATTTCTGATTCTTCGTGTCTTATGGAGTAGTATAAGGCAGCGATGTGAAAGCTTTCAAAAATCTCACTGATGAATCTAACTTCCTCTTGGTACCGCCATGTATAACCATAAAAAAGCTCTACGTCACGTGAGGCGTTAGACGTAAAATCCCTGGTTTTATGCAGTAATACGAAACTCGCTATTCCACAATCCCCCGATTCACCGCCTTCGGCTAGGCCATATCGTAACAGGCTATAAAGACGATCGAGCTTGATTATAGGGAACCAGTTGGATAGTACCGACGAAAGCGTAGTATATTGACCCGAGCCCTAAAATTAATTGTAGTGGACCTTATGCAGGGAAGGGTCGTTCTGAAATCGTTTCCGCGCCAGTCTTGACGGGGATGATTAACTGCCACTGCGGTGCTGCTGAGTTGAGGAATAGGCTCTAGATAGCGAAGCCGGTCGTCACGGATGAGACCAAGCCCGGTTGGAGCAGTAGCCCGGGACGATAGGATCTGAACCACGACATGTGTGGGCTGGATCCTGGGGGCGAGTGGGGCCCTCTATGGGAAAGGTGAAAGCTATTTCGTATTTCGTACAGTTTGGAGATTGACTAGAGATTTTACCCTCGAAACCATGATGAGAAACGCTTGCTAAAGAGACACGCTGCGTAACAAGGTTGGATGCAGCACAGATTAGGTCATGGCCAGAATAATCGCCCGTCATACTCAGTTCTCCGACACCATACTTGGTCTTATCTTCGTTTGCGCAACGGATCTGGTCTCTGTCGCTTTGTGCGCAGGAGTGGACCGCCTCAAAATCGCTAGCAAGACTTCTGACCTCTCTCACGTGGCCGAGTACGTAAACTCTGTCACGTTTCTCCTTCCGGTATTATTGTTGCGGAGCCTTAGTGCTAACTTACAAGAAGCCGGCGTTATCCCTGATCTTTTACGACAACGAACAAGAGCCCTTTTCCCATTTTATGGAATGGGAGTATAGGCACCCGGGAGGGGTTAGAAAGTCGCCACCCAAAAGTTAACCCGCGGTTTAGGTATGAATGAACCATACTGTTGTCGAGCGCAGCGCTGCGGTTACTAGTAACACATGACGGGACGACCAAGTGTCTGAAGTCCGCAAATGCATTGTTTCGAGTGCTGCCGCATTACACGAATGTCGATGAAACATGATCCCCTGTTGCGGTGTAAAATCTCATCCTGTCCAACTTTACCTCGCTCTTCCGCGCTTAATCCCGCGATTCACAGCCTGCAATAGACCCATGGGATCTACTTCAGCCCACTCGAGTCATTTCCGACTCACGTGGGTAATAGCGGAGGGAGCCGGGGCATGAGTACCGAGAGTCTTCGGACAATCCAACTGCTGCTTACTATCCAAACATACCCAATTATGGGCCTTCTCCGCCGCGGTGCATTTTCTCTTCGAGCTGCAGAACACGGAGTACAGTGTACTGACCCGCAGTAACAACAAGAGAAAGGGGGCGGGAATGGTCTGCATTTAATTTATGCGTTACTTGGGCGCTCGTTCCATTTCAACTACCCTTCTTATAATCGCACTCAGATCCGCCCCAGGATCCACTTCCATACCACCGGTCCTTCGTCTAAACGTTTCGTTCTTAATGCGAATTGTACAAGGGCCCATAACAAAAACATTTGGCTGGATTTACTCATACTCCCTCGACTTTGGTACTCAGTGTATAGGTAGCTGGCTAGCGGCTTCACTGACCACGTACAGCCGAGAGGGTCTGGCGATACCCCACCGCCAAAGCTTCAATGACACATGACACCCCAGTCTCCATCCGGGTTGCGAGTAACACCTCCGAAAGGAGTGCGTGGAGCTTGTATCCCTCTATGCGGTTTGGTAGTGAGTGTATGTTGGATCGCTTGTAACAGGGTATTATGACCGTACATTCGCATCAGCTTGACCTCGGAATACAGGACAGTCGTGGTTCACTGACGCGGAATCTTTCTGATTCGTCGGATCAAAAGCATAGATTACGCAATTCGGCTACAGGACCTCTAAGCCTGATACGGGCGCGCTCGGGATGCTCATTATATATAATGACAGCTTACACTTTGGGAAACACTCCCAAAAGAGCAGCCACTCTATATGCCCGGTTGTAGCCTTATGATGCTGTACCTTAATTATACCACGACTTAGAGGTTTAAAACGTGATTACGCGACGGCGCGCATCAAGCGTTGACTCGATTCACTCATAGTGATATGGTAAGGCAACGTACACATGACATGACCCGGCACTCGAGAGAGCTGGCCGTCCTTTGTCTCGGCCTGTAGGTCGCTCGCATAACTTTCTCGAAGCCTTGGGTCAGATTGCGATCATTACGGCTGGCACCAGTACCGTAGGGGAGCAGCCATCATAATTCGGCTGAGTACTAAGCACTATCTTGCCATACCTATACAACAGAGCGATACCCCGCATACAACGTGGAAAACCAGAAGCCGTATTACCATTACGACGCGGATTTTGAACTGCTGTCTTGGGCGTGTGTTTTTAGATTGAGAGACACGCCATGGAATGCCGACTCACTTGGCTCTGTTGTTAATCCATCTAGTGCGGCAAGTCCGCTACAGCTACAAATCTTTCTAAAGGCCAGAAGTGACACGCCGGTCTAGAAGATATATGATACGTATTGGTAGGCTATACCGTCACATTATGTCAGCCCGCTGATGCCTACCCAAACCCGGGACGTACGGCAATAAAGCATGCACCATCAGCGACCTACATTCTATCGTCCCTGAGTAACAGTCTCGATACGTGGTTTATACCATACGCTTAAAAAAAGCATTGGTCGGCAGTATGCAGTTTGGTCCGGCATTCCCAGTTGGGATTTCTGTCACTTGTCCTAAGCACTAAGCACTGTTATACGGGACAGAATTGTGCGTACGCTTGGGAGCATTCCAGTGGGTCGAAAATATTTCCGGTAGGGCGCGTTTGTCCAGCCAGGGGGAATGAGTACCCTACAGGCAATAATTTATCGAGCCAACGTCCGTTCTCGGATTTCGGCAAGGACACGTAGGGGGATGCGGGAGGTGCTATAGGTCCCGTTAAGTGGTGAGCTAAGGGACTGCACGGGTTTTCCGACGGATCACTCTAGAAGACCTCAATACTCAAAGCCACTGGGACGTGGGTGCGGAGAGGCCACTGCGCAGTTTAATAGGAGTATAATTTCTGACAGCGCATGCTCGTACGTCAGTTGCAATAATCAGACCTCAGTAATTTGTCTTATTACACCCTATGCATGCCATAATATCCACTTCCGGTAAATTAGCGGCTGCCGTGTGAGTGCATAGCTACAACGTCCATCTCACCTTCCGGAGATAATGACTTTTTCGTCCCACTATAGTGAGCTGCGGAGCGGCAAGGCAGACATAACTATTACCGTCCGACGCTAGCCTCCATTGCGATCGAACCGTCCCCTGTGCATTACTCTGCAACTGACGTGTAACTCATGTCTCTGTGTGCTTGCTTAAAACTAAAAGTTACGAAGGTGCTGGGTCCGAGTCCCATCATCGAGAGTCTATTGATTCTTGCCAAAGTATCGTACGAGGTGTCTATCAAAGAGCGTGTTGTATCGGGAAATAAGTGTGTCTCGTTCTAGGGATAGTGAGTCCTTGATGCTGAAGTTAAGTACGGGCGGCATTGGACAGATATCTATCTGTAGGATACTGCTCGTTAAGACCACCCACTAGAGTGACATCCCATGGCTAGGATGTTCACGAGTCCAGCAATGAGTATATCAAACGTCTCAATGACGGACCTTTCTATTATACGTGCGACGCCTCGGCAGCAATGCAAACGCACGCACCTAAACTCTACACTCAGATAACCTTTGGAGGAATACACAATTTAAGGTGAAGAGTACCCAAACTCCAAGACTCCACAATCCTTGCTGAACGCCTCAATAGCCATCTGATGAGCTCTAAGTTTGGGAGTTCATCCCTCTTTCCCTGGGAACCCCCCGCCATTGGCTCCCTCTTGGCCGGGAAGAATGTACCAATGACGCTAGTGCAGCCATGCATTGTTAGACCTGGGTGGCAGTTTACAACTCTTGGGTATTTGCTTGGTTTCTACGATTTACAGGGTTGGGGGGGGCAGAGCCGCGACAACTTTTCGTATTTCGTAGACCAGTGTCTGAGGCACCCTCCCAGGTTTCCTGATATTTCGTATTTCGTACGAGACAACCCCAAGTTTAATCGACTGCCTCGCGTTTCATCGAAAGTGTTAGAGTTTTCATCGAAATAATCCACGTCTTAAGATGACTGCGGGGATGTGCAGCTGGTTACTATACAGTACCCGCCCTAACGCGCTAAAGTGCAACATGAACGGGGTACTCATGACCTTTTTGGGGTGCCTGCGGTCGCATGCTCGGTACTAGTCTCGACCTTCTTACTGGCTGATGGCTGATGTCCGTGGACCAACCATGATTGACAGTTGGAGGCTACCACAATCCTCCAAGGTGTTTGCAAGGCCAACTGGACAGTATTCCAAACTAGCTCGCTCGCTCTGAGTAGGGGCTCTAAGCGGGTCTGCTACGCCGACCTTTGATGATGGCAATAGGAATTAACCATGTGGACGTTCCCACACATGACACATGACGCATTCCTGAAGTCTCAAGATGTAAGTTCTCTCTACCTATATGGGCTCCAATTAAGCTGTACCCTTTAGCGACCGTCCATCCCATGCCGTGTCAGGGGCCTAGAAATTGGCGGGTCTACATGGTCATGCCGAAAGAAAGCGTCCCAGTGAGTCCCGATTCCACGGTAGCTTCAAGGTGCCAAAGGTGTACCCACCTTTTGTCCTATCGGCTATCTGACGAGCTAGGACTTGTACACCCGAAGCCGCCAAAGAAACGTAAGTGTGAAAGAACATTGCGGCGGCTGGCGGGGTTCAGCCGAACGCACAAGAGGAGTGTTTAATGACTATCACCGGAGGCCTTACGCCCTGGATTGACGGTAAACAGGAATCGTCGGGCTCGCGCCTGTCTGAGCTTACGTATCAAATATTAGTAGGACACAGGACAAAGAAGTATTCCGGAGACTCCGCGGCTGTGTTGGGCTTCGGATGTCTAAGTGGCTGATGAGGCTCTGGACGTCACGATGGAGCTGCACTTCGGGGCTTCTAAGGTTCAACCGTAGATCTTGCATTAAAAGACGCTAAGTTAAGTCCGCTATCGATTGCTAGCCTTTTGTTCGCCTGATCTCAAAAGTAACCCACACAGCGTGGTCATCGGAAGCCTAGGCCAGGCTACCCCTTTTATATGAAGACTATCCTTCCTTTCTGATTATTAGCATACCGATGCCTTTATCCCCGTGACTAATCAGATATATCTAGCTAGTTTAGGAGTACTCGTCCGGCTCATCATGCCAGAGCTCGGTGTAAGTACATGGACTGAGCTGGCATTGTGGGGACAACGTAATCGGCCTGTAGCTTGAGATCTTTGAATTATGTACACCGCTCTCTAATCAGGGCGCTTGGGGACGGAACAATGAAGCAGACTGACACCGTAAACTTCGCCAATTCATCGTCCACAACGTTGATCTCCTCATACCTACGGACCATGGAAGAATTTCATAAGAGAACTAGTGACTCTTAAGGTTCTGTCGGTGAGTCAATAAATCAATCCTCTCTTTTCATTGGAAATATCCACCCCTACGGATTCTCATTAT"
#print missing_substring[0:20]
#print t.is_string_in_trie(missing_substring)
my_answers = t.check_against_text(text)
print my_answers
#print len(text)

#correct_answers = "239 246 383 390 669 676 963 1757 1935 1993 2065 2465 2599 2606 2914 3125 3626 3633 3873 3937 3944 4088 4095 4503 4576 4978 5104 5111 5419 5985 6035 6053 6060 6079 6659 7092 7111 7118 7528 7535 7613 7620 8079".split()

#for idx, i in enumerate(my_answers):
#	print i, correct_answers[idx]
