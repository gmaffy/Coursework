"""UCSD Bioinformatics Algorithms Part II,
Week 1: Finding Mutations in the Genome."""

class Trie(object):

	"""Directed tree structure to represent a collection of strings.
	Contains a root node with indegree zero. Edges are labeled with
	characters and nodes are given arbitrary integer labels (0,1,...,n).
	Each edge leading from a given node is distinct.

	When trieify is called on a list of strings, that list of strings is
	given a trie representation such that each path from root to leaf
	spells a string in the list by concatenating the edges.

	Each node is represented as a tuple of (integer ID, {dict of outgoing edges})
	where outgoing edges are repesented as character : integer ID pairs"""

	def __init__(self):
		self.root = (0,{}) #each node is a tuple of (integer ID, {edge dictionary})
		self.nodes = [self.root,] #list of nodes indexed by ID

	def trieify(self, list_of_strings):
		node_counter = 0
		
		for string in list_of_strings:
			current_node = 0

			for char in string:

				if char in self.nodes[current_node][1].keys():
					current_node = self.nodes[current_node][1][char]

				else:
					node_counter += 1
					self.nodes.append((node_counter,{}))
					self.nodes[current_node][1][char] = node_counter
					current_node = node_counter

	def __str__(self):
		return str(self.nodes)

	def get_edge_list(self):
		edge_list = []

		for node in self.nodes:

			for key in node[1].keys():
				edge_list.append(str(node[0])+'->'+str(node[1][key])+':'+key)

		return edge_list

	def is_leaf(self, node_idx):
		"""Return True if self.nodes[node_idx] is a leaf."""
		return not bool(self.nodes[node_idx][1])

	def is_string_in_trie(self, new_string):
		"""If some slice new_string[0:x], where x <= len(new_string), exists in the Trie,
		return the slice. Otherwise return None."""
		symbol_idx = 0
		symbol = new_string[symbol_idx]
		current_node = 0
		pattern = ""

		while True:
			
			if self.is_leaf(current_node):
				return pattern

			elif symbol in self.nodes[current_node][1].keys():
				pattern += symbol
				symbol_idx += 1

				try: #if the Trie is longer than new_string, return pattern (which should be new_string)
					current_node = self.nodes[current_node][1][symbol]
					symbol = new_string[symbol_idx]
				except IndexError:
					return pattern

			else:
				return None

	def check_against_text(self, text):
		"""Return all indices within text where a string in the Trie appears as a substring."""
		current_index = 0
		index_list = []
		while text:
			if self.is_string_in_trie(text):
				index_list.append(current_index)
			current_index += 1
			text = text[1::]
		return index_list


# t = Trie()
# patterns = """TTCCCAGGGGCCCTGGCACTTCCGTGGCGTGAGTAGAAAACGCAGCCGTTCCCGGAAGTCAATTATGGGGACGATTCGTGACT
# GGCTGGAGGCAGGAGGTTTGGCGCTCATCCACGGGAGCGAGCGCAAGACTCATTTAATACGGACCGTCCTTCCAATCCTTGCAGTCCTCACACTGTTCTG
# GCAGTATTATGTGAATCACAAGTTAGAATTCGGACTAGGGCGTCCGGTGGTAAATGCGGAAATCGGCAGATCCCTGAAGTCCGAGCTTGGGTTCTCA
# CGCAGAAGGTCGCCCAGTTTCTTGGTATGCCCAATGTTCGCGTAGTTCCCTTCGGGATTGCTATTTGCTTGCATTTGGGCCG
# GTTCACCCTGGTTAACCTTCACGGCAGGGCCTGCCAATCCAGGCAAACAGAGTGCATTCCACCCTCGCTTCTATACCAAATATTTTACGTC
# ATCTAGTTATCTAATAATCGTGTCTTGCAGGGTAGTGTATTTGGATCTAAGATGCACCGAACGCCTACATTGTGGGTGGTCAAGGCGC
# GTCATCCGGGAATCACAAGTTGTGTGCGTTTTTGTGCGGAGATTCACCTCCGATACCGCGTTAACCAGTTGCCGACGCAACTGACAAG
# ACAGCATGTGGTATATGATGTCACTCCCATTTCAAGCAAGGTCAACCTCGACCTTCTACGCTGGACACACGGGATGGGCCACCATAATCATTAACAGCC
# CCGTCTCGATGTACTAGGGGTAGTCGAACGAGGACGCTAGGATTGTGTTCAGTCGTGTATTTTGTTGTTGTAGCAGTACAGCTACTAGCCCAA
# TAGAAGAAGAAATGGTATTCTAGGGGGGACATCTAGGCATACGTGGGGTCCCTTGCTTATAACGTAATCGACCGTTGTCACTACCAAGTCCCGTAATC
# GTCAGCGCACTGTCTCCGGCCGGGAATTCCCAGGACAGCTTTATCCATCTTATGTGGATGCACTTGTCATTTCTGCACTTA
# CCAACGCGCCTCAGGGTCAACAACCTCCGATAACTGCGGGCACTTCGTGCCACTGAAGCACCTCGAGGTCCGTCGCACTTTTGTGTATATCGCT
# AGGGGAGTGTCAGCTAGACGAATATGACGGCCAACTTTTGTTATTTGATATCCCCAAAACATATCTGTAAGGTCGTATGTGAAGATACGTT
# CTTAATTCATCACCTGGTACCAGGCACTCCTGGTCTGCCGATATCAGCGTAGCGGGAAACGACCAGGAGTGCCGTGCCTAGC
# AAGACGGAGCAACAATAGCACTCCACACGACCCTGAAATCTCAATCTCCGCGTTGGTACTCTGATCCTCACACGGCCGTTAGTA
# ATTTATCTGCTAAGGCAAGGTTATCTCTAAACCTCTTCGATGTGATTAAATGTTATTCCCTAGCGACGATGACGCAGCACGGCCAGGCTG
# AATGAGTGGTCGTGCCGACCGCATGCATAACTCCACCCACCGGACTTTTATCACTCACCCCGAGACGGCCGAGTCCCTGGTGGTAGGCGCGTTA
# TGCGAATGACGCTCGATTTAAACTTGTTTCATTCATTGCGCTGGGACCTGATACAGGTATAATCTGAGCTAGTACTTGGGC
# CTGGCGCCCGTTTTTGGACCCAAGTAAAAGCTCGGGCCATTACTGCCTTTTTGGGCTGCCGGTTCAAATGACGTCACCCAGTA
# ATAAATCTAGGAATAAGGCCTGTCGAGATACACACAAGGATTTATGTTCCTCGTCTACGGGGTAAAAGCTAACAGCGATCTT
# TGACCCGTTATTCGCCCACCCCGTTCTACTATTGGAAACATAACGGCCTCGACTAGGAACGGTTCAACGCACTTGGAGTGAGAGT
# TCGTATGATGGTGACCACGTTACCGGTCAGGTATCCTGTATAGACCGGGATTAGCTTTTCTGCCGGGCGGAACCCAATCATTCGTGACTGGGG
# AATAGTACCCCAGGTGCTTCGCTATCGAATTCGCCATGCTATATTGGTAGTTCAACGGCCCTGGCCTTTTCGCACAACTAG
# TGCTCGCTTCAGAGACTCTCAACTGACCTGAAGTACATTCCGAGCAGTACTGTGCAAATCCGCTGACTAGGGCTTTGTTGGA
# TCCCGAACATGAGGATCATCGCGGAATGACCCCCGCTGCTCTGAACATCAGTTGGATGAACTAGGAATCCTAAGTAATGATTAGCGCGTT
# CGGTGATGGTAACTAGAATGGGGGCGTGAGCCTCTTTCACAACTCGAAGCGGTGCAAACGAGCGCACCCTGACACCACCCGGTCATGTTCAAA
# CGGGTCGTAGCCACCGCGATGCGCGGCGTTATACGAAATGCACCCAGAAACGTGAGGGAATAGGGTCGCCCATTCCTCAAGTAGCGTAC
# TTATTTTAAAGACAGAGACAAATGTGAGGTGCAAGATACCACATGGTTATTTGTCTGGCACTGTCAGTAAATATCTTATCCTCAGACAAACTGACTAC
# CTGGGAGCTTATGGCTTGGGTCAAACGAGGAGCTTTAGGCTTGAGGAGAGATTGTTCGCCCTGCTGACCCCGAGTTCCTGTAAATGAA
# TATAACTGCGGGCTTTATACGTTCCCGTCTCTTCCATAACTGCCACAGACACCATCCTATATGGAACGGAGGTAAAGATACAC
# CCGCTGCCCGGATTCCGGTGTTCTGTTTGGTCACTTTGGTCCACAAAGTAACCCTCTGCTTGGGATTCTCCATACCTTTATCCATGGCTCCAACGTATT
# CCAGTTGCGACTGGGCCTTATCGTGATGAGAGTTAAAGCTCCCGCCTGACCGGGACTGTGACACCAAGCGCCATACCGCTGCCAAGAGCACCT
# TTGGAGATAGCCCTGTCTGATTAGGAACTACCTAGGGCGTGTGTGTAGAGAGGTTCAAAACTCAACAAGAGTCGGGATGAAATA
# GCGCAAGACTCCATGAGAGGGGTTTCACGGATTATCCAAGGCCTTAGATTTATTATGGGCATTAAATCTTAGGTTCTATGT
# TGTATACGGCATGCCAAACGTCTGCACTTTGGACTCCCCCCTTGTTCCCGATAGCCTCGTGCAGCCACTCTAGTGATTTAGGTTGGCGTAATCACCTAGT
# ATTTGGCCTGTCCATGTAATATGGAAGCCAACTCAGAAACGTTCACCCTAAATGTAATTTACGAGCCAGTTCCGTGGACCGGTGCTAG
# GAGTTTTAATACTAATGCCATCGAGAGGTAAGGTACTACTCCTGAATTATAACGTTCCGTCTGCGGTGCCACCCGCGGCTCAGTGCCGTGTGGTCC
# ATAATCTCCATGGCGAGGTCCTGTGGTGCTTGGCAGGGCGACGGCGACGTTGCTACTAGGCATAGTAAGCGACTATATCATCCAAATGGG
# GTGACTCGGTGCACTCGTACCTCACTTGTAAGCCCGGCGCAAGTGACGTGTCAGTGTGAATAGGACAATTTGACAGCATGCTTAA
# GTTCGCAATTTCGCACGCTTAGTAATCATTTCCCGCGGGCGCGAATGGGAGCGCCACGAGTAGCTTGGGCCCATCGTATACACTTTGCTTCGTTAG
# TTCCACAGAATTACCTTGTGACAGAGCAGGCAATCTTTCACTCAATAGGTTATGACATATATGCGGGCTAATAGTGTGATCCCTGCAAGGCGT
# ACCAAGTAGTGAGTTTGTCTTAGTTATGCCTAAAGTGCTCGGGCAGTTCGAACGTATTCGCTAGGCTCTCTCAGTCGATTCTCAGAA
# CTACGACTGCGCGAGAAACAAAGGATTCTAAAAGGGAGCTCCACATAAAATCGGTCATTACAGCGAACACTTTATGTTATCTCGAC
# ACTAAGTAGAAGTTACGCCCCTGAAAAAGTCCACCATTGCTAAGCAGCCCCCGGGACTAGCGGGCCTATTACTGTCGGCGGTGTAAGATTCGTGTAGG
# TGGAGTTGAGCACATTCTCATATACTTCCAGCGTGGGCACTAATACTGACGAGGGATTAGCATTGGTTCTCATCATTATCT
# CAACTATAACTGCGCGGTGGAAAGACTATGCATTCCAGCGAATCCGCGTCGTCGTCGGTTAAGCGGCTCGGGAGCGTCAACCACACCGTAAAAAACACT
# CGAAAGCGCGAGACGAACCTTAGAACGTATTTCTCAAGACACAACGCTAGAGCTAAGGTACTCGCGCGGTTGACTTCGCAA
# TCGAATAGAGTCCCCCTCCGCGCGACTTCGAGCGTGGTTCATTCTCTATTGAGATTAAAAAAGACCGCCTATAATGATTTTGGTG
# CACTTTTACAGTGGATCTAAAGGGCAGGGAACCATGCAAGACTCAAAGGGTCACCGTCAAGTCCAACCGAAGTGCGAAAAG
# CTTGCCTCCGTCCTGCCTGCCAGGCTAAGGGGGGTCTAATTTCGCCATGAGCCTTAGGTCGCCTGAAATTCGACTCTTGGACAGAAGCCAG
# TGAGGCGCACGAGCGGCCGTAGTAGAGTCACTGACCTAAATTGTCATGTTTGGACTCGATTAGCTCGTTATGCCAAAGATCC
# GGTCCCATTATCTCCATCTCGGCATTGTAACCCAACGACGCAAAGGATACGCTCGGTAAGGGACCAAACGTACTATCTCCGGAGAGCACAACACATC
# AATACTACGTAGAAAAACGATACTCCGCGCGTTTCCCTAACCAACGGCTGCGATTCAATGTTAAATGGCTAGTGCACATAGCCATAGGTC
# CACAAAAGTTGACCGTTTAAAACAGACGCTGTAGGACTCCCACAAAGCCCGGTTCATCCACCTTAGTTGCTAGAGTGTCGCCGCT
# TTATTGTGTTGTGAAGATTTCGGGTAGACCGGATATAGCCCACGAGTCGCTCGAATGTAGCTATTTATTTTGTCGTCGATAATACCCACAC
# GAAGAGTGGGAGGAGGCGGCGACAGGTGTTAAGCTTACCACTCGCAGTATGCTCTACCAGGGTGGAATGGCCGAGATGATTTTCGTTCA
# GGGACCAATTTCTTCACGCAACTACAAAACGCTCTTAGGTTCTTCATGTCATCAGGATCGGGTCTGGAGACCCGACAGAGCCGGTGCT
# AGGTGCTTTGGAGGTGGTGCGGAGCTTGGCCATCCCATATGTCGGGCACGACGGTTAGGCTGCCACCTAGTCTGAGGAAGAATGT
# GATCAGAAACGGGATGCGGGCCTGCATCTCTAATTTGTGTTAGGTTGGTAGGACAACCGCAAGAAGCCTCTACTCTTGACCTTATCTCTGGC
# CTCCTCCCGCGGCCGATTCAGACGCGCTGTAATGCCGTAGCCTTAATTGGATCTGGGGAACATAGGGCTCGTTGGACAAATGATATCCG
# TAGATGCATAAGTTTGGTAGTGACGAATGACGATAACAGGCTCGGTCTGCGGGTGGTAGAATGCTAAGTAGCCAGGACTGG
# TGTGCACCGACGAACCAGCAGCACTTGTGTGCTCATACTTCCCTATGTGTCGTTGATTCCGCTCCTACGCACCATGGTTAAAGACACTT
# CGGTTATGCGACAAAAATAATTGGGGCACGCCTGATCGTTCTCCGGTTCTCTTGAGGTCGTAAAACGGACTCCCAGCCTCTGAA
# CTGACGATTTTTCAAATACACGATTCAATCTCTCAGACGACCACATTAGTAGATCCAGCCGGAACGACAGGGGCCCGGTGAAACGCGCTGTA
# TCGATGTCACCGAAGAGTTGCCAACTAGCTCTGCTCCGATTTGACATTGCGCTAGTTCTGTGAGCTTGCACGTGCACTACCGCTTCACAGAAC
# TTAGATCAGAATAGAAGAATCAGAACAATATGGTGGTAGCGCGTCGAGGATATGCGCGGAATGGAGGGTAGGCCGTCCTTGCCGAGCCCCCGAAGC
# CAGTGAATGTGCCCTCCGAGTGAGAACGGGAAGTCCAAAATCTTCGCTACGTTCCATGCCAGCGGCGTATTTCAGACCCGTCTGTGATGTTCTG
# AAAATCTTGGTCGACCGCGACCAGCGACGCGATGTGTTAATTATGTTGAGAATAATGAGGGGACAAAAACCACTGTTCGGAGGTAACTCGGATG
# TATCGCTCTACCATGAAAGGTGTGTCTGTAGTACAGTGTCAGGTAATCTAGAAACGCGACGCTCTTTTCAGCTGTTAGCAGGCTCG
# TCTACAAAGAATTAATCTGGCTCTTTTCAACGCGCTGGGATGGTAATGCATAGCACTGGCGATCGGGTGACTAGCGATCCATACGGTC
# TTCCGGTTGACGTTCAACCTTTCAGTGTATCCCCAAGTCGTCTTAAGATGAGTGTCCGGAGATTGCATTTTGGAGAGAGTAAGGACTAC
# TTTTAGTACTCAATAATGCGGTCCTGGTGAAGCATAAACTGGTCTGCCGAGTTTGTTTAGACTGCAGTCATTTCTTCCTAATGGTAAAC
# GCATACTGATTGCTAATAGTTTGAGATAATCGTCTGTACTGACAAGCAAACCAGCTTATTGCGTCTCTTAAGAAGACATCATTA
# TTTGCACTTCACATCCAGGGAGATTATATGTTAAAGAAGGCTGTAATAGTTGAACTACCGACCCAGGGCCGTCTCACGGCTC
# GACGGGAGATGACGAGTGGAACTCAATAGGGGTGTTATCAACATCTTGAGAAATGTGCTCAGAACTACGTGCTGAAACCCTTTCTGAATCTGGGA
# TATCTTGGACTGTTCACTCGACCTAGCTGACTCATAGACTTACAAACAGACTTCCGCTAAGTCGGGGCCCTTAGCACTTATGAATTCT
# CCGGGAGGGAGTCTAATAAGGCGCTGGCGCTCCTGTGACTCTCACAGCCATCCGATGTGCTAATCTTTGGGGCAGACTTA
# CTGTTCCACGGTTTGGGGAGTTGATTGCAACCGAGAGCTCACATGCTAGCTGTCATAGAGCAGAAATTTATGAACCTGCACAGTACAATGTTATGCA
# TTGAGGAGGGTCTGACAGTGCGGCTTAGTCTTTCCTTTCTTTGCCCTTTTCATATCACCCTGAACTGCGATTAGAATAACCGCGAAATATG
# TGTTTGCAGTTGCATACCGTTATTATACTCCACTACTGTTAAATCTCTGAATTGAGCGGATTTAGACGGTTTACCAATAA
# AAGGACGATAGATACCGTAGAAGCCAAGGACTAGAAATAACCATCACTAGCTACCTACCCCCTATGGAGAATGACACGATACGGACAGGGATGTTACA
# TATGGGGGGAAAGTCACGTGTTAGCATAGTGCGTCGCCAAGTAACGTAGTCTCCAGGGGCCAAAAGAACCTCGACCCCCTCGTGTC
# ATCTGAGGGAGCCACCGGCCTACGAATTGAAGACGTGGTTAGGGACGCAATAAGAACAGTTCAATGGCGGCCGCGATCCCTCGTTCGTCCTAACGTTC
# TCGAATCTAACTCCTGGCCAGTCCGACAGACATTTACGGCTCGGAACATCACAAAGAGCAGACAACCTATCTCTACTAAGTAGA
# GAATCACAGGCTCCGCTGACGTTTTATTTAACAGTTCGTCCTACTTTATGGTCTACCGGGGGGATTACGATATCATAGCGAAGCATCAGGA
# CTCCCACTTCTGAGTCACCAAAAGCATCTGGCGTGTATAGCTATTAGAACTTAAAGGAAGCCAGAGATCAGCGATGCAGCGTCAGAGTTAGCCCCTTG
# CCCCTGCTTGAATCATACATTGGAGCATTAGAGCGGGAATGTGTTGCGTACCACGTTCGCCGGCGTGGTTTGGTGCTCGGA
# TTGGCAATAATTTTTCCCCCAATCCCCCGCTGAAATCGTTCCCACCAGGATATCCGATTTCGAAATCGCCAAGGGAAGCAGCTACAGCTGT
# GGTAGTTCCCGCCGGTGACCCGTGTTCAGGAGTTGCAGATTCCGGAACATATCGAATCGAGATGTCCCACAGCATTCAAGC
# TGCGTCCGGGCAATAAATGTTACGGCGTATTGAACTGCTTAATAAAGATGATAGAGGTTAGTTGAACCGGCCCTACCGGGTTCCTGGGA
# CCGCGATCGAAGTGATTATTTGTCTGCCGTTAGTGGCCGAATGTCCTTTGCTCCGCCTGGGTTCCGTGGTGAACGGGACGACAGTTGCATGGCC
# CACCCAAAATGCGTTCGGTATGAGTAAGAGGAAGCGGCAGGGGTAGCTTCGAAGCTTTTAACTTCGGCTATGCCGGTATT
# CCCATTCCTAGGCTAAAGCCACCTATTGGTAGCACTCCTATATAGGAGCTCTTGTTTGTTAGATGCACCCCACATGAGTCGTAC
# TTGCGGCGATATACACATCACAAAAGATACAGTATGGGACGCGGATAGTAACGTCGACTAAGTTGACGAGTACCTCCTAGACCGAGCCCCCCCTT
# GTAAGCAGTAATCTTTGATTCCGTAGAGCCGTCAATAGATGAAGCAATACACTTGAATGTTAGAAATGGATTTCCGGTATGAGGTGATAATC
# CTTCAGTTACAGGGTGGAGACTAGACAGGGGCTTACTGAGACCACGGACGAAGTGCAAATGACACCAGATTTGCCCTGGAGTG
# CTTCACCCGTGTGTCGTTGCTGGCCTTACGTCAAGATCGGGGTCATATGTCCTAGCCTAGAGATAACATAATTGAATTACTTGTATATTTC""".split()
# t.trieify(patterns)
# for i in t.get_edge_list():
# 	print i

patterns = """TTGCTAACTG
GAGACTTGA
TGAGATCTG
TACGGTATA
CTCTAGACT
TAGAGAGTA
ATGACCGAT""".split()
t = Trie()
t.trieify(patterns)
print t
text = "GGTCTCCCAAGAACTGATACAGTTGTCCTCAGCTCTATTGATAAACTCTCTCGCGAGCTGCAAATGTACTAGGAAGCACTGTCATAATCTGGGGCAAGGCAGTGATGATACGGTATACGGTATACAGCACTTACGACGAGTCGACACATGTATGCGTCTACAATTCGCTTTTGTCTTAATCCCGACTTCCGCTTGAACCCCCTGGCAGCGATTGTCTGGACTGTTGATAAACCACAATACTAGATAATCGTAACCATGCCTCACCTATATCCTATCATTTTGGGCAAAGATACCGATGCTAACTACCGCTTATACGGTATACGGTATATACATGTCCCCAAGTTTCGAAGTTGGCTTAACTAGAGAACAACCGTCCTCTAGACTCTAGACTTTGGGTACTGTTGCAATGAAACCGCGAGGTTTCTCCCTAAATAGTTCTGTTGAAGCATACGGTCAAGAAACGCGTCGTACATCCATGTGACTCCAATATTACTACGGAGTGCTAACTGTTGGGGGCAGTTTAGATGACCGCACGCTCCAAAGCTGTAAGGAAATGCCAGAGGTTTGAGATCTGTCACGCACGTTGGGTCAATTTTGGGCTGGGCTGCGTGAGATTGCCAAGACTACATTTCGTAATTTAAGACAATAAATAACTACTCTGTAAAGGGCCATACACACACTTATCCAGCGGTCCCATGCGGCGTATGGGACCGAATTATTTTCGTAATTGGCTTCAGAGCCATACGGTCTTAATTTAATCTTGGCGGTACTGCCACTTAAGTTGACCACGTATGATGAAGAAATGCTTGTCATCCAATGGCCATGTGATATTGCGGAGAATTAGTGGGTCGTCATTTATCGAGACCAGTGAGGGGAAAGGGCTTCCGAAGTGCAGAAGCATCTCTGGTCCAAGTGATAAACGATTTGGAACGTAAATTAATGGGAACGGTTGACAGTCGCACGTGCATCATAAATATCTTTTGGAGACATGGCCCAGCACCGTCACTCCGCGTGCTTATATGGGGGACTGCGACTTACAGCCCCTGTCCACGACCCTACCACCGCCACTTGTAACGCATCACGGCGGGATTGCGCTATACTAGCTTTGTAGCAGATCTAAATAGCGCGTAACTAAACAACTAAGATCTTTGCACTTAAACTCCTACTTTTACCGTTTGTGCTAACTGCTAACTGAAGCTCCAGCTTCCCCGTGTGGCTCGTTCACGCCTTTGTTCTGGCAGCGCGCCTTCGATCCATGGCTTGGGGAGACTTGAACTACTGTCGGATCTCAATAGTATAAAAGCTGGTAAGCACTTTATTACAATTCGACACGAGGAGTGTGAGGCTCCTCCCAAGTGGATAACTGTGCAGGTTCTATCATGCCATCCCCGCAAAAAGGTTAGGTTGACCGAATGTGGATTAAGTTGCAGGATACCCGCATCTTGTAGCTGTCAGCGTTCAGTATTCCCGTGAAACTTCCTGAAGGAGAGCAAGGAGATTAAGCTTGTATGAAAACATAGTAGCAAATGTGTTAGCCCCGCCTCGGGATGACAAAGGTAGACCAGGCGCACTGGGATGCCTGACATACGTCCGGCTGTATTCACAAGACATCCCTGGAGTAGAGGACTACTAATCTCACTTTGCAGAAATTTACTTAAAGGTAATGAAGTGATAAGCTAGATGGCAGCGTTAATCTCTCCCCTTCGAACTGCCCCACCACAGCACCTCTTTATTATTGCCCGGGGTTTGTCTTCCGAAAGGGATAATGGTGAATTACAGAATGTGCGGCCATGTTATGTTGAAAACTTCCTATTCATTGGCGACGGATAATGCCATAGGTCACTCTAATGGATAACAGTGCTAACTGCCTAAGTCGCGGTAGTCACGCGAGCTCCTTCTCGTGACACTCTTAAGTCAAGAGGCGTCTAGGTCATGACCAAACCGGTATGAGATCGGCCGCAATCCGGCGACGGGTTGATAATATTCCGCCTAAGAGGTGGGAGCCTGGTAGGGTCAGATACTATGCCTGCCGGTGCTCCATACGAGAATACCGCCACGACAGGCCGCATGGAATTAGTATAGGCCACATTAATTAATGATTTATTAAGATGATATGACCGATAGCACCGTAAGCATCGGAGCTACCACACGGTTGACGCAATACTAATGAAGCGCGACCCTTTTCTAAGTAACTACTACACTCGACCCCTACCGCCGACTGTGGTATTGCGTTCCCTGGATACAGCAAATCTGCGGGGCTAGTCCCGGTTTCGCGTAGAGCCGTGCATCGTGGGTGGCGCATTTCGCAAAGAACACCTGTGTGATTCGGTAAGTTAAACTATCATAGAAGTGGACTGAAGGACATAAGCAGACCTGAATTCCGTTGAGTTTACCGTGCATTAGGATCAAGCGTTTCACTCGTGTAAACTCCATTTTTGCAGATGGACGAAGACCAACAGTCCAGTGGCGACGTAGAACATGACTTTGAGCGATGCAGTGCAGGGCATTTTGCCGCGGAAAACAGGGATTGTCGCAATCACCAGCCGCGTAAGCAACTTGTCTGGAGCCCCGTATAATAGTTTCCACCTCTTTTCCCTGCCACAACCCGTCCTATGCCTAAGATAGCGCCCGTCATATATTGAATGTATATCAATGACTTGGTTTCTATGGTTTTAGCTTTTTGTTAGTTTCGCCCGTTACAGTATTTTCAACGAATCAGAGCTCCTGGGATTCATGTGAGGTACCTAATAGACTCCTGGCGCTTCCAGTCAGTTGTAGCAAAACGGAAATCGTCGATATACCCACGGGTAGGCTTAGCGTTCGGGGCGAAAAAAACCACATGCGTTCAGAGGCATAACAGGATAAAGGGCAGATAATGGCTTCAGTACTGTCTAGTTCTCTTTAAAGGTAGGGCCATCGGCGCCAAGTCGGGATGGCGAAGGAAACAAGCTATGACTGGAACATAGCTCGCCGATCTCGAACCCTTTGCCATGGAGGCGACTATGTTGAGTTTCCCCCTCTAACGTCCCTATGCTTACGTATGCCAGCTAACTCTCAAGCCACGACGGGTGCGGTCATCGTTCCAAATTCCGGAACGCCCACCTAATGAGACTTGACCCGCCTATACCTACTCACTGAGGCTGAACAGTGGTGGGAGCAGTTAAAATTCACAGGTTTATTATATGAGCACACGAAGCCGAATGACGATGTGACGCCTTCCGGTTACACGTAGAGAGTAGAGAGTAACGAAGTCATACATCTCGCGCACGCTTATCACGCATACCACGGCGTGCCACAATCTAGCCGCCTGATCTGACCTGAAAAAAAACCGGCAGGGGATGACATACTTCCATGGGGCACAGTGAGCTCTATTAGATGACAAAAAAGTGCGACAAACTTCCGTGCGTGGGACCAGGCTAAGCGGGGGTAATACCCCAACCGTATTGGCCCGAGCGTTAGGCCACTGGAGACCAGTCCTGAGATTGAATCCAGCTTATCTTACTGATTGATAGAACGTACGGTTCATGCTAACTGCTAGAGACTTGATCCGGCAACTTGGCTATTGCGCTAGATTAGGGGAGAGGTGGGATGATAAGCTAGTAACTTTTTGCCGGACCATGTGTGTGCGAAATGTCAACAAGCGTCCCCATCCTAAAGCGATGTCGTTGTAGAGAGTAGAGAGTATACCCGACTGGTCTGATCGGTGCGAGACGCAGATTGCTTAGAGAGTAGAGAGTAGAGTGCCTTAGCTTAACGATTGAACCAATTACCAGGGCTTGAGTGCACGGGCTAGTCTCACCACAACATCCGTGAGTAAAGCTTATTTAAATCAGTTGCAGTCTACACTAACCCAGCCTCAACCCGCGCTGCGTGCACGGCTAAAGAGGCCAACTAAGCAGAAGGGAGATAATACCAGACCCGGATAGACACATTCTGGTAGACGCAGAGATAATCTCCTCTCTGGCGCCCCCTATCGGTGTAGAATGGACTATTCACGTTAGCGCGGTTAGTCGTGTAGCGCAGGAAACGGCTCAGATGAGTCGACGTAGCTCCGCTCTTTATGTCTACACAGTCATCTTAGCGGGCCATAGGAAAACGATTATCGAAGACTTTCTACGAGAGACTACGTGGCATCAATATTTATTGAGATCTGAGATCTGTGCGTTTGGCCCGGGTCTGCGACACGAGCTGATCCTTTTGCCTCGTCTCTGCGATGTAAGCAGAAGCCAAGATCTGTGGGCGACGTAGTTACATCTACAGCCCTGGAAACTATTGCGAGCGATCCCCCGGAATGACCGATGCCACCATACCTTTCTAGAGAGTATAGATGTGGTCGGGTCGATTACATCGTAGACCTCCTTGTAGGCAGAACCTACATGGGAGGGAGTCTGGCCACGACCGCGAAAGTACAAGGGCGACCTTGTGCACGGTATTGTGTCACTAACGTTCTTGGAGTCTATCTTACTGTGCAACGTAGTGCTAACTGATGCGCTTCGGTCGAGGTTTGGAATCGCTTATTCCAGAGATCCCAATCGCGACTCCACGTCTTATGCCGGTCCAGGTAACGTCGAAATATCCTTTCCTGAACCTAGTTTAGTCTAGTACTAGGTCAGTCACCCTTGAGGGTGGAAGCCAACCAGCTCTTACGCGGACAGATGTAGTTACGGTACGCTATTGTGGTAAGTGGGCCGGGCGATCACGAGATGATCGCAGCGCCACTTTGGTGCTACGCGAATAGCATGCCTTTTCGGGAGTGCAATATCATAGATGCACTCGTCAACCCCTGTACCATCAAGCCAGCTCCCGGCTGCTTACTTGAGACCTTCAATTGAGGCTTTCCTCCGTCGCGGAAATTTCGGCAAGCTACCTTAGAGTTCCCTTCTAGGAGCCTCCATCGGATCCATGGAGTTTAGCTCTATCGCGCGTACTTAAATGGAGTCGTCACTCGGGCGACTGTGGTTTCTAGGGTTATTACGTCGGCCTCCTGGCCCACTATGACCGTGAGCGCAACACAATTTTTCTTGGCACGAAGCTAATGATACGCCCACGCCCTCGCGCGAAGTGCACTATAACTACTTGATCACGTACCGTCCATATCTTCGTGCTATCGCCTCCCATAGTAGAACGTACGAACACCAGCGCCCAATGGCGAATTCAGAGCAAATGAGGACTCATGTCTTCCGTACGGGCGTACGAGGTTCGGGGCAATCCCTCTGCTGCGCATAAGCGGTTCGGGCGTTCGGGTGGGGAGCCACTCATAAATTAACCAACTAGACGCTTGGCCACTGCACGGAGATGAGATCTAGCTAATGATAACACAGATAGGGAGAGATCCTCGCATTGCATGAGATCTGAGATCTGAATCGCCGGTTGCGCTATATCCCCTGGACTTCGCGCTAGGCGCCCTAGCGGGTACTAGGATGGTCTGCGTTGTATTGGAGTGTGCCAAGCTTCCTCATATCTTTTCAGTTGTCGACGTGGTGTACCTGAGACGATTAAAGGTGGACCTGCAACGCTGACACTCCTTACTGTCCTACTCTGGCGCCCAATATAACCTGGGGTTAACATGTATATACCCCATTGTACGATACCGAGCCGGATGTTGCTTTTTAATCTTATGTCAAATGAATTTACGGAGGACGTTAGAGGGACCCGGAGTCTCCACTCTAGACTGTTAGATTTTCCTCCTCAGGAAGCCGCGATACCATGAATCTGGAGCTTTCTATTTTTGGTAAAGGCCAGCTATTTTCAACCGGAGGGGTCGTAATCCCAGCCAAGTGAATCCCACCACTTCTACGCGTCCCCTGGATAACGAATCTAGCCTCTCTTAGTTAGAGGAGCCTCCTCTTATGCATGATTAACACTCGGGACCAAGGCCTTTACTCTCCGTGCATTGGCAGATATAAGGACAATAATTCTTCAACGAACTACATTTTTAAGGTAAGCGGTGTTGTAGTCTAGTCAGAACTCGGCCAAAGGTCTAGTGTTAAATATGTGGGATGAGCAGCTGCAATGAGTCCTGTAGCTGGGTGCGTCGCCCCAATAACTAACATTCACCAAAGTACCGCTGTGAAATGGTCCGTTTCTTGTTAAGACTATGGCTTACACCACGTGATGCAGCCGTAACAAAGGTAAGAAGGACAATTCCGCGACAGTCAAATCGTGGCTCCTTACTTACGCTGGGAACCTCAGCATATGTCAACCATCAACTCGACCCACCCGCTAGTCCGCACCTTGATAGTATCCGCAACCTGAAAGACCTTTTCGGTCGTGTGTTTATACTTCCTTCGTACTATTTCAGATGGAACTTACTTTAATCTTACGGTGCTCATATTTTGGACTGAAACACTCTTAAGTGAAGCACACATGTATAATGCTAGCTACCCGTGATGACCGTTCCTCAGTCGCGCTTCGCGAGTTTCTGACCCTTCCGCCCGCCGTGCAGCCATTAGAGAGTAGAGAGTATCGGACAACGCGATATCCGCGTGACTAACCAAAGGTTAGGTTAAGGTAGAGATTTGTGGAAGGTCTGGGGGGTCTCAATGCGTATAGTTCAATGCGTAACTCCTTTACATGACAGGGGAAGCGAGACACCTGTTCTCTATCCTCCGGCTTGCATGAGAGGCGGCCTATGCTGCGTGAACTGTTGTGCCTCTAGACTCTAGACTCAAGTGACCCAATCCCAGCGTACTGGGGTCCTCAACGATTTCCACTTTGAATTATGACCGATGCGACAATGTACTGGTTACGCTCTCTTTGTAGTAACCCTGCGTGATAGCACTGATTAACGATTGCTACACCCCGGAGAGAGCTGACAGTTGCGTGCAAGTTGAGAATGTTGTAAGTAGACCGGTTGAAGCTTCAATCGGACGTGACACATCCACTATTAGACTGATCCGGGCAGGCTGGCGAGTAGAAGGAAGCTTAACAGATCGTAGTATAGGCCTACAAGCGCGCCTGGCTGCCCAACCTAGAAGAAGCACCCCGCTCGTCTTACCTTGCGTTTCCTGCCTTAACGGTTACGCGGGTTTGCACGCTCGCTAACGTAGACGACGGCCAATGTCTCGTGCACGTGATCCCCGCCCCTCCGATACGGCCGGGCGTCCTCTAGACTGAAACTGACTCGCGCTAAAAGCTATCACGCGCGTTCGCCAATGTAGCCATTCTTTCTTCCGTGTCAGAGGGTTCTATTCTTGATAATATGGACCACCTGTCTCCATGGGGGCCGACTTTCTCGGTCGGAATCGCAAAAGGCCCAATTCGCAACTCGATGCTCTCGTTCATTTCTTTCCAACTGTTCGCAACGTCCCCGGTAACGAAAGACAGCCATCCGCACAGCACCGAAAATACGCTACAAGCTGAGACATAGCACACGATACGTCAACAGCTCGGGTTTAGCATTCATACCTGAGAGCATCCAGACTTACGGTATACGGTATACTGACCGGGACAAAGCGGTCTGCCAAACATCATCTAGTGTTCCCATTCAGTTTCAGTCGACATCCGCGACTGCCCCTTCCTGAGCTTAGGCAATACAGATGCTCTTAGACCTGTCTAGAACATAACCAGGGTCCCCGATCACCATGATTCTGGTGATCAGCGAGTAACGCCTTAATAAGTACAGTCATTCGCTCCCAGCCGCCACTTTCACTCCTCTTATGTTGGTCTTGGAGCATAATGCATGCAACAGCCTTGGGATGCGAGGACAGTTGGCTGCCCCGGCCGACTTTAACGGGGCCAGTACGAACCCTTATCTAACTAAACATCTTATCCGTAAGGTATGCTGCGAAACTAGCACAGCTCTAGACTGAGATCAGCTGTTGATTACCACGTCACTGACTTGGGTATGAGCGAGAGATTATTCCCGGTGAGATCTGAGATCTGCTAGAACTCCCCATCGCCAGCTAGGGTTCACTGATGAGCGTGGTTAGGGGAGAGCGTAGGTGGCCATTTATTCATACCTGCACCACTATTGGTACCTGCCCCTTGTTAGGTATGGGCCCGGGACCCCGCAAGTAACAGTTAGCACGGGGGTAAAAAGCCCACTCAGCTACTTCCGGATTACATGATTGTCTACTTACGGTATAACGCGGATGAGGTTTTGCAACCCCTCAGTAGGGGACCCAATCAGATGCTCTGACCCCTGGAATCGTGTGTCTACCTCTTATCCCTCTACCTGATCATTGATTGTGATATCAGCGGTTTAAAGTCAAGGTCCTACTCTGTGTGACAGCAGATCATCTTTTTCTATCCATAGATGAGGTGATCCCCCGTGCCAGGTTTATCTACAAGCCACCACGTTGCGAGACTTGAGACTTGACCAACGAAGCGTAAGCTCGACCGGCTCTGGAAGTCTGGCTTGGGGACCACTTTCACAAGGAGGGGACCCTACCTGATACCCATAACGCAGTGGTCATTTCTATAACGTGGACCACGCAGCGCCGCCTAGCGTCCATTGAGCGTACCATACGTACAAGTTTATGTTCGATGGACCGTACGCTTCCTCAGCTTTAGATAACCCATATGACCGATGGTATACGGTATAGGTTTGAACTGTATTGCAATCGAAATTCAATTATTCACAGGGGCTTATTGTTACTACAGTTGTAATATAAGCGTAGCAGCTACATGCTGGCGTGGGTTCGAGTGAGA"
missing_substring = text[500::]
print t.is_string_in_trie(missing_substring)
print t.check_against_text(text)




